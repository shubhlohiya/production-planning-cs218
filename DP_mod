#include <iostream>
using namespace std;

int main(){

    int m;
    cin>>m;

    int D[m], Cdemand = 0;
    for (int i=0; i<m; i++) {
        cin>>D[i];
        Cdemand += D[i];
    }
    int E, C, OTC; float Hcost, Fcost, S, OTPrice, W;

    cin>>E>>Hcost>>Fcost>>S>>C>>OTC>>OTPrice>>W;

    int maxE = max(E, ((Cdemand%C)==0)?(Cdemand/C):(Cdemand/C + 1));

    int maxI = max(Cdemand, maxE*(C+OTC));

    float minCost[m+1][maxI+1][maxE+1] = {0};
    
    
    for (int k = 0; k<m+1; k++){
        for(int i = 0; i<=maxI; i++){
            for(int e = 0; e<=maxE; e++){
                
                if(k==m && e<=E)
                {
                    minCost[k][i][e] = Hcost*(e-k); //base case: production cost for month m if we used k<=e employees in previous month
                    //then we hire some employees to make number of employees equal to e
                }
                else if(k==m && e>E)
                {
                    minCost[k][i][e] = Fcost*(k-e); //base case: production cost for month m if we used k>e employees in previous month
                    //then we fire some employees to make number of employees equal to e
                }
                else
                {
                    minCost[k][i][e] = 1000000;
                }

            }
        }
    }

    for (int k = m-1; m>=0; m--){
        for(int i = 0; i<=maxI; i++){
            for(int e = 0; e<=maxE; e++){
                
                for(int imin = 0; imin<=maxI; imin++){
                    for(int emin = 0; emin<=maxE; emin++){
                        
                        //calculate HFcost - Hiring/Firing Costs
                        float HFcost;
                        if (emin>=e) // we fire
                            HFcost = Fcost*(emin - e);
                        else //we hire
                            HFcost = Hcost*(e - emin);

                        //calculate Overtime cost here for emin, imin
                        float Overtime;
                        if ( ( -(C*emin) + imin - i + D[k] ) > 0) 
                            Overtime = (-(C*emin) + imin - i + D[k]) * OTPrice; 

                        //Calculate Salary here
                        float Salary = S * emin;
                        
                        //Storage cost to begin with imin inventory
                        float Storage = W * i; // 
                        
                        minCost[k][i][e] = min(minCost[k][i][e], minCost[k+1][imin][emin] + HFcost + Overtime + Salary + Storage);
                    }
                }

                //cout<<minCost[k][i][e]<<endl;
            }
        }
    }
    //note that there is one redundant loop in the end for minCost[0][i][e]. 
    //We can stop the loop, but currently let's keep it for simplicity


    cout<<"Min Cost: "<<minCost[0][0][E];

    return 0;
}
